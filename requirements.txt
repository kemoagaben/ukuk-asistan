import openai
import numpy as np
import json
from fastapi import FastAPI, Form, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from PyPDF2 import PdfReader
from docx import Document
import tempfile

# OpenAI Key
openai.api_key = "OPENAI_API_KEYINIZI_BURAYA_YAZIN"

# Veri tabanı yolları
MEVZUAT_PATH = "mevzuat_db.json"
ICTIHAT_PATH = "ictihat_db.json"

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_embedding(text: str) -> list:
    emb = openai.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return emb.data[0].embedding

def cosine_sim(a: list, b: list) -> float:
    a_arr, b_arr = np.array(a), np.array(b)
    return float(np.dot(a_arr, b_arr) / (np.linalg.norm(a_arr) * np.linalg.norm(b_arr)))

def en_benzer_madde(metin: str, topn=5) -> list:
    with open(MEVZUAT_PATH, "r", encoding="utf-8") as f:
        mevzuat_db = json.load(f)
    query_emb = get_embedding(metin)
    skorlar = [(cosine_sim(query_emb, m["embedding"]), m) for m in mevzuat_db]
    skorlar.sort(key=lambda x: x[0], reverse=True)
    return [m for _, m in skorlar[:topn]]

def en_benzer_ictihat(metin: str, topn=3) -> list:
    with open(ICTIHAT_PATH, "r", encoding="utf-8") as f:
        ictihat_db = json.load(f)
    query_emb = get_embedding(metin)
    skorlar = [(cosine_sim(query_emb, i["embedding"]), i) for i in ictihat_db]
    skorlar.sort(key=lambda x: x[0], reverse=True)
    return [i for _, i in skorlar[:topn]]

def gpt_gerekceli_analiz(user_text: str, mevzuatlar: list, ictihatlar: list) -> str:
    mevzuat_str = "\n".join([f"{m['tip']} {m['madde']}: {m['baslik']} – {m['metin']}" for m in mevzuatlar])
    ictihat_str = "\n".join([f"{i['esas']}/{i['karar']}: {i['ozet']}" for i in ictihatlar])
    prompt = f"""
Kullanıcıdan gelen olay/dilekçe metni:
{user_text}

İlgili mevzuat maddeleri:
{mevzuat_str}

Emsal içtihatlar:
{ictihat_str}

Sen bir Türk hukuk asistanısın. Yukarıdaki bilgiye göre olayla ilgili:
1. Hangi maddeler ve içtihatlar neden uygulanır?
2. Olayı hukuki açıdan madde madde, profesyonel ve gerekçeli analiz et.
3. Kısa özet ve sonuç çıkar.

Yanıtın sade, sistematik ve Türkçe olsun.
"""
    completion = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "Sen Türk hukukuna ve yargı kararlarına tam hakim bir hukuk asistanısın."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=900
    )
    return completion.choices[0].message.content

@app.post("/analyze/")
def analyze(user_text: str = Form(...)):
    mevzuatlar = en_benzer_madde(user_text)
    ictihatlar = en_benzer_ictihat(user_text)
    analysis = gpt_gerekceli_analiz(user_text, mevzuatlar, ictihatlar)
    return {
        "en_yakin_mevzuatlar": [{"tip": m["tip"], "madde": m["madde"], "baslik": m["baslik"], "metin": m["metin"]} for m in mevzuatlar],
        "en_yakin_ictihatlar": [{"esas": i["esas"], "karar": i["karar"], "ozet": i["ozet"], "tarih": i.get("tarih","")} for i in ictihatlar],
        "analiz": analysis
    }

@app.post("/analyze_file/")
async def analyze_file(file: UploadFile = File(...)):
    content = await file.read()
    if file.filename.endswith(".pdf"):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
            tmp.write(content)
            reader = PdfReader(tmp.name)
            text = "\n".join(page.extract_text() for page in reader.pages)
    elif file.filename.endswith(".docx"):
        with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
            tmp.write(content)
            doc = Document(tmp.name)
            text = "\n".join(para.text for para in doc.paragraphs)
    else:
        text = content.decode(errors="ignore")
    return analyze(user_text=text)

@app.post("/webhook/")
async def webhook_analyze(user_text: str = Form(...), webhook_url: str = Form(...)):
    res = analyze(user_text)
    import requests
    requests.post(webhook_url, json=res)
    return {"status": "ok", "detail": "Sonuç webhook'a gönderildi."}

@app.get("/")
def root():
    return {"status": "up"}


